#!/usr/bin/env python
# coding=utf-8
#
# <bitbar.title>Litecoin Tracker in USD</bitbar.title>
# <bitbar.version>v1.0</bitbar.version>
# <bitbar.author>mgjo5899</bitbar.author>
# <bitbar.author.github>your-github-username</bitbar.author.github>
# <bitbar.desc>Short description of what your plugin does.</bitbar.desc>
# <bitbar.image>http://www.hosted-somewhere/pluginimage</bitbar.image>
# <bitbar.dependencies>python,ruby,node</bitbar.dependencies>
# <bitbar.abouturl>http://url-to-about.com/</bitbar.abouturl>
#
# by impshum

import requests
import base64

indicator = '<span class="text-large" id="quote_price">'
r = requests.get('https://coinmarketcap.com/currencies/litecoin/')
s_i = r.text.find(indicator)
temp = r.text[s_i+len(indicator):]
price = temp[:temp.find('<')]

print(price + " | image=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")
