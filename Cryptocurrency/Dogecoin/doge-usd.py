#!/usr/bin/python
# coding=utf-8
#
# <xbar.title>Dogecoin coin Ticker ($1USD)</xbar.title>
# <xbar.version>v1.1</xbar.version>
# <xbar.author>impshum</xbar.author>
# <xbar.author.github>impshum</xbar.author.github>
# <xbar.desc>Displays current Dogecoin price for $1 from cryptonator</xbar.desc>
# <xbar.image>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</xbar.image>
#
# by impshum

from requests import get


def main():
    result = get('https://www.cryptonator.com/api/ticker/usd-doge').json()

    if result['ticker']['change'] > '0':
        print(' Ð%.0f | image=iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QAyQACAALwzISXAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4AQHACkSBTjB+AAAALNJREFUOMvVk70NAjEMhb87WYiGBZAQU7ABNSVSWpZgEEagsJDoKBELUCEKFuBuCKTw0xyQC0lICe5i+/k9/wT+3opUUJQhcAUqa8I5ZQT4tANwioGTCkQZA9vmOQE2oUJFhL0DXBz33RpKUfCLfLTQJMx9IlEWuQr6QB3prGtNS1lwiMvEYo7ekNsKRBkB+y+rH1hDFVOwy7ids+gbVzrsM6CXeYDTF85xroB1ZoHb73ymB5RhJkpZTihGAAAAAElFTkSuQmCC color=#000000' %
              float(result['ticker']['price']))
    else:
        print(' Ð%.0f | image=iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QABACnAADQ9FZaAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4AQHACQ1FZwK3gAAAMRJREFUOMvNkjEKAjEQRZ+jKNjYKh5AbzCdjVcQj+BFPIKlp7EMeAJrUbASQVCEr80uG9cNbqe/Cgn/5WUI/DqNfBHM+kCzbs+lPUAr2pwBq5qABbB+M8gszkDvS/kOdAG5VBgEM4ApsP0CGLukjxlEoA0wSZR3Lo0qhxhZDIBDAmDA0wsBLD51CZeOwLKivHbprZx6AkAHuEXbD5fawYwywMqAzOKeDTTPvKqcTGZBMLsGs0utn5gADYEHcKp9e9ni//MCDtNCE3qjsIwAAAAASUVORK5CYII= color=#000000' %
              float(result['ticker']['price']))


if __name__ == '__main__':
    main()
