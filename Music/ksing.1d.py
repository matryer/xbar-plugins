#!/usr/bin/env PYTHONIOENCODING=UTF-8 python3

# xbar Metadata
# <xbar.title>KSing 全民K歌</xbar.title>
# <xbar.version>v1.3</xbar.version>
# <xbar.author>xfangfang</xbar.author>
# <xbar.author.github>xfangfang</xbar.author.github>
# <xbar.desc>Play songs from KSing</xbar.desc>
# <xbar.image>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LrooGuy66zZJGrxH3heSWGfQe++9Z5dddll8vH/84x9HEuQFOz46AN13vvMdW2KJJVp0o6GdddZZRi+AD8I222wT/vkwXXjhhXbaaacZElw1QlKlV3D99deX30s1f62xA9R33XXXkPDpiXQ0sBLn17/+dQMweS98FI477rgvZI3eBXV24IEH2vnnn28dAayfe/f/iUtG2KsjRtpSNo8NtmXsRWuwd22yrWqL2MD1B9kLdW/Yas4zJ73e287++UW28jXn2vwD5/tC/tprAV/QU6ZH3VwPio+besdKp/JZ9vfff38Iep3D3UolM2EQJuLfd999ma2F7g23yq4FgPvvf//bjj76aJt//vnD3wwBswcqZMUVV7QTTzzR0ImgJuhMAlQvu/r71qd3rxnMfv372JaNk6tfDZNszVtv7PBs8bG69957gyn22msv+8EPfmAAGaAKKPBl5eIeO3RCp5xyin3jG98IcLvnnns6ZZEH3arDDjssukpXX311lPvmm2+2yy+/3HbYYYdIv6MrA3USPSP0yOp+0yhIf8MNNwxAoBFdc801kXRLbnyAlltuORs2bJg99NBDZf8A0N57790sqOKRHhQAro9dBG7nDxLzX/7yl4iPeCGVrZ1RzhAMgCA+QBWamToAAak5UJkh4lY8/PvaV2z0iEabYL1tyYEr2vurLmyfbbmyvbXWIHttrfms1xpL2evL9rG7lqyzcWvMb9u+2c9uu+OeVsTcOi/PPvusPfroo3bMMce0GOAPf/iDof7Ir6FDh1YNQ3tceOGFO18VwAvTl4CMobMYNWqULbLIIvEyAdqddtopuqbkVP6feuqpuKerijSK9IqOTn5kiiEwF1988dDF4l8iveKDeciH8oK93LDjXnFiYieGUziF9VzakQf/KlQRmA3eeI846BybMH6SPVDTx+VSD08kTsTK/XS/ns8kVqXv1gFwpIUUp3y0lL7yTRik+OOPP97o6qNGwY2vL/WKKgU/EPHx8dluu+0CXLfaaqt4B4AQjaW96atOlG+lhT09k0UXXTQkY+xfeOGF+FDm6h7smyPyRDxcyh9+c3s9U3dImd/+9rdt9OjRdscdd0Rd8FH54IMP7IQTTjAGX+A11ErUF40ANz7IuRsDfgAM9YIwgJRNmqhPaDR8uPQO8vSVLwC7UlDA36yQ6oA4kISRMtUrU90offImXsKO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</xbar.image>
# <xbar.dependencies>requests,requests_futures,playsound,pyobjc</xbar.dependencies>
# <xbar.abouturl>https://xfangfang.github.io/019</xbar.abouturl>
# <xbar.var>select(VAR_ID="679b9982232b318b"): User ID. (String of length 16) [64999a87232a308d, 679b9982232b318b]</xbar.var>

import re
import os
import sys
import json
import math
import time
import random
import requests
from time import strftime, localtime
from playsound import playsound
from requests_futures.sessions import FuturesSession
from concurrent.futures import as_completed

USERID = os.getenv('VAR_ID')
SCRIPT_NAME = sys.argv[0][2:]  # sys.argv[0] = ./ksing.1d.py


class jsonEnconding(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, Song):
            data = {
                'shareid': o.shareid,
                'ksong_mid': o.ksong_mid,
                'time': o.time,
                'title': o.title
            }
            return data
        return o.__dict__


class Object():
    CACHE_PATH = '{}/.ksing_cache'.format(os.path.expanduser('~'))
    SETTING_CACHE = '{}/setting.json'.format(CACHE_PATH)
    NUM_PER_PAGE = 8
    REQUEST_WORKERS = 4
    UPDATE_TIME = 86400  # 86400 = 1 day

    @property
    def headers(self):
        chrome_versions = [
            '74.0.3729.129',
            '76.0.3780.3',
            '76.0.3780.2',
            '74.0.3729.128',
            '76.0.3780.1',
            '76.0.3780.0',
            '75.0.3770.15']
        return {
            'Host': 'node.kg.qq.com',
            'Referer': 'node.kg.qq.com',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 ' +
            '(KHTML, like Gecko) Chrome/{} Safari/537.3'.format(random.choice(chrome_versions))
        }

    def getText(self, url):
        return requests.get(url, headers=self.headers).text

    @staticmethod
    def timeConverter(unixTime):
        return strftime('%Y-%m-%d %H:%M', localtime(unixTime))

    @staticmethod
    def createCacheDir():
        if not os.path.exists(Player.CACHE_PATH):
            os.makedirs(Player.CACHE_PATH)


class Song(Object):
    def __init__(self, ksong_mid, time, shareid, title='', play_url='', play_url_video=''):
        self.title = title.replace('&#39;', "'")
        self.time = time
        self.shareid = shareid
        self.ksong_mid = ksong_mid
        self.play_url = play_url
        self.play_url_video = play_url_video

    def getPlayUrl(self):
        if self.play_url != '':
            return self.play_url
        if self.play_url_video != '':
            return self.play_url_video
        content = self.getText(
            'https://node.kg.qq.com/play?s={}'.format(self.shareid))
        self.play_url = re.findall(r'playurl":"(.*?)",', content)[0]
        self.play_url_video = re.findall(
            r'playurl_video":"(.*?)","', content)[0]
        return self.play_url_video if self.play_url == '' else self.play_url

    def getContent(self):
        return requests.get(self.getPlayUrl()).content

    def __repr__(self):
        return "{} - {}".format(self.timeConverter(self.time), self.title)

    def __lt__(self, other):
        return self.time > other.time


class Player(Object):

    def __init__(self, userid, total_num=0, nick_name='', age=0, gender=2):
        self.total_num = total_num
        self.userid = userid
        self.nick_name = nick_name
        self.age = age
        self.gender = gender
        self.playlist = []

    def _getInfo(self, page):
        url = "https://node.kg.qq.com/cgi/fcgi-bin/kg_ugc_get_homepage?type=get_uinfo&" + \
            "start={}&num={}&share_uid={}&callback=MusicJsonCallback&inCharset=GB2312&outCharset=utf-8".format(
                page, self.NUM_PER_PAGE, self.userid)
        content = self.getText(url)
        data = re.findall(r'[(](.*)[)]', content)[0]
        return json.loads(data)['data']

    def _getInfoAsync(self, page, future_session):
        url = "https://node.kg.qq.com/cgi/fcgi-bin/kg_ugc_get_homepage?type=get_uinfo&" + \
            "start={}&num={}&share_uid={}&callback=MusicJsonCallback&inCharset=GB2312&outCharset=utf-8".format(
                page, self.NUM_PER_PAGE, self.userid)
        return future_session.get(url, headers=self.headers)

    def _addDataToPlaylist(self, songs_data_list):
        for data in songs_data_list:
            song = Song(data['ksong_mid'], data['time'],
                        data['shareid'], data['title'])
            self.playlist.append(song)

    @staticmethod
    def createCacheDir():
        if not os.path.exists(Player.CACHE_PATH):
            os.makedirs(Player.CACHE_PATH)

    def createSongCacheDir(self):
        Player.createCacheDir()
        song_cache_dir = '{}/{}'.format(self.CACHE_PATH, self.userid)
        if not os.path.exists(song_cache_dir):
            os.makedirs(song_cache_dir)

    def save(self):
        self.createSongCacheDir()
        user_profile_path = "{}/user_{}.json".format(
            self.CACHE_PATH, self.userid)
        with open(user_profile_path, 'w', encoding='utf-8') as f:
            json.dump(obj=self, fp=f, cls=jsonEnconding, ensure_ascii=False)

    def saveSong(self, song):
        self.createSongCacheDir()
        song_path = '{}/{}/{}-{}.m4a'.format(
            Player.CACHE_PATH, self.userid, song.ksong_mid, song.time)
        if os.path.exists(song_path):
            return song_path
        content = song.getContent()
        with open(song_path, 'wb') as f:
            f.write(content)
        return song_path

    @staticmethod
    def load(userid):
        Player.createCacheDir()
        user_profile_path = "{}/user_{}.json".format(Object.CACHE_PATH, userid)
        if not os.path.exists(user_profile_path):
            return None
        with open(user_profile_path, "r", encoding='utf-8') as f:
            d = json.load(fp=f)
        p = Player(d['userid'], d['total_num'],
                   d['nick_name'], d['age'], d['gender'])
        for i in d['playlist']:
            p.playlist.append(
                Song(i['ksong_mid'], i['time'], i['shareid'], i['title']))
        return p

    def getPlaylist(self):
        self.playlist = []
        content = self._getInfo(1)
        self.total_num = content['ugc_total_count']
        self.nick_name = content['nickname']
        self.age = content['age']
        self.gender = content['gender']
        if self.total_num == 0:
            return self.playlist
        self._addDataToPlaylist(content['ugclist'])
        total_page = math.ceil(self.total_num / self.NUM_PER_PAGE)

        future_session = FuturesSession(max_workers=Object.REQUEST_WORKERS)
        futures = [self._getInfoAsync(i, future_session)
                   for i in range(2, total_page + 1)]
        p = 1
        for future in as_completed(futures):
            p += 1
            content = future.result().text
            data = re.findall(r'[(](.*)[)]', content)[0]
            self._addDataToPlaylist(json.loads(data)['data']['ugclist'])
        self.playlist.sort()
        return self.playlist

    def __repr__(self):
        userinfo = "name:{} gender:{} age:{}\n".format(
            self.nick_name, self.gender, self.age)
        for index, song in enumerate(self.playlist):
            userinfo += "{} {}\n".format(index + 1, song)
        return userinfo

# Ascend
# Dsescend
# Random
# Single


class Setting(Object):
    def __init__(self, loop='Ascend', current='', currentid='',
                 current_userid='', showtime=False, shownotify=True,
                 lastupdate=0):
        self.loop = loop
        self.current = current  # current song title
        self.currentid = currentid  # current song shareid
        self.showtime = showtime  # show songs' publish time
        self.shownotify = shownotify  # notify when play songs
        self.lastupdate = lastupdate  # last playlist update time
        self.current_userid = current_userid

    def save(self):
        self.createCacheDir()
        with open(self.SETTING_CACHE, 'w', encoding='utf-8') as f:
            json.dump(obj=self, fp=f, cls=jsonEnconding, ensure_ascii=False)

    @staticmethod
    def load():
        if not os.path.exists(Setting.SETTING_CACHE):
            return None
        with open(Setting.SETTING_CACHE, "r", encoding='utf-8') as f:
            d = json.load(fp=f)
        return Setting(d['loop'], d['current'], d['currentid'],
                       d['current_userid'], d['showtime'],
                       d['shownotify'], d['lastupdate'])


def refreshPlugin():
    os.system(
        "open -jg \'xbar://app.xbarapp.com/refreshPlugin?path={}\'".format(SCRIPT_NAME))


def isPlaying():
    cmd = r'ps -ef | grep ksing.*.py\ play'
    res = os.popen(cmd).readlines()
    if len(res) > 1:
        return True
    cmd = r'ps -ef | grep ksing.*.py\ resume'
    res = os.popen(cmd).readlines()
    return len(res) > 1


def killAll():

    def getProcess():
        cmd = r'ps -ef | grep ksing.*.py'
        res = os.popen(cmd).readlines()
        pids = []
        for line in res:
            if 'grep' in line:
                continue
            pid = line.split()[1]
            time = line.split()[-1]
            try:
                int(time)
                pids.append((pid, time))
            except ValueError:
                pids.append((pid, 9999999999))
        return pids

    def killProcess(pid):
        cmd = "kill -9 {}".format(pid)
        rc = os.system(cmd)
        if rc != 0:
            return False
        return True

    pids = getProcess()
    pids = sorted(pids, key=lambda x: int(x[1]))
    if len(pids) > 0:
        pids.pop()
    for p in pids:
        killProcess(p[0])


def notify(setting, title, content, force=False):
    if not setting.shownotify and not force:
        return
    os.system(
        "osascript -e \'display notification \"{}\" with title \"{}\"\'".format(content, title))


def findIndexByID(playlist, id):
    for i, song in enumerate(playlist):
        if song.shareid == id:
            return i
    return 0


def findIndexBySongidAndTime(playlist, songid, time):
    for i, song in enumerate(playlist):
        if song.ksong_mid == songid and song.time == time:
            return i
    return 0


def play(setting, index):

    def createPlaylist(playlist, song, loop, nextIndex=True):
        index = findIndexBySongidAndTime(playlist, song.ksong_mid, song.time)
        if loop == 'Random':
            random.shuffle(playlist)
            if nextIndex:
                index = 0
            else:
                index = findIndexBySongidAndTime(
                    playlist, song.ksong_mid, song.time)
        elif loop == 'Descend':
            playlist.reverse()
            index = findIndexBySongidAndTime(
                playlist, song.ksong_mid, song.time)
            if nextIndex:
                index += 1
                index %= len(playlist)
        elif loop == 'Single':
            playlist = [song]
            index = 0
        elif loop == 'Ascend':
            if nextIndex:
                index += 1
                index %= len(playlist)
        return playlist, index

    killAll()
    index = int(index)
    player = loadPlayer(setting)
    song = player.playlist[index]
    playlist, index = createPlaylist(
        player.playlist[:], song, setting.loop, nextIndex=False)
    song = playlist[index]

    while True:
        setting.current = song.title
        setting.currentid = song.shareid
        setting.save()
        last_setting = setting

        notify(setting, Object.timeConverter(song.time), song.title)
        refreshPlugin()
        path = player.saveSong(song)
        playsound(path, block=True)

        setting = loadSetting()
        p = checkPlayer(setting)
        if p is not None:
            player = p
            last_setting.loop = None  # recreate playlist
            notify(setting, "Update song list", "success", True)
        if setting.loop != last_setting.loop:
            playlist, index = createPlaylist(
                player.playlist[:], song, setting.loop)
            song = playlist[index]
        else:
            index += 1
            index %= len(playlist)
            song = playlist[index]


def loadSetting():
    setting = None
    try:
        setting = Setting.load()
        if setting is not None and USERID is not None and setting.current_userid != USERID:
            # current user have been changes
            killAll()
            setting.current_userid = USERID
            setting.currentid = ''
            setting.current = ''
            setting.save()
    except json.decoder.JSONDecodeError:
        pass
    finally:
        if setting is None:
            # new setting file
            setting = Setting(current_userid=USERID)
            setting.save()
    return setting


def loadPlayer(setting, forceUpdate=False):
    def updateFromInternet():
        if USERID is not None:
            userid = USERID
        else:
            userid = setting.current_userid
        player = Player(userid)
        try:
            player.getPlaylist()
            player.save()
        except KeyError:
            return None
        return player

    if forceUpdate:
        return updateFromInternet()

    player = None
    try:
        player = Player.load(setting.current_userid)
    except json.decoder.JSONDecodeError:
        pass
    finally:
        if player is None:
            player = updateFromInternet()
    return player


def checkPlayer(setting):  # check if we should update song list
    lastupdate = setting.lastupdate
    seconds = int(round(time.time()))
    if seconds - lastupdate > Setting.UPDATE_TIME:
        player = loadPlayer(setting, True)
        if player is not None:
            setting.lastupdate = seconds
            setting.current = ''
            setting.currentid = ''
            setting.save()
            return player
    return None


def getPlayer(setting):
    player = checkPlayer(setting)
    if player is None:
        player = loadPlayer(setting)
    return player


def getDirSize(dir):
    size = 0
    for root, _, files in os.walk(dir):
        size += sum([os.path.getsize(os.path.join(root, name))
                    for name in files])
    return "{:.2f} MB".format(size / 1048576)


def cmd(title, p1, p2='nothing', refresh=False, color=None):
    current = int(round(time.time()))
    params = {'shell': sys.argv[0],
              'param1': p1,
              'param2': p2,
              'param3': current,
              'terminal': 'false',
              'refresh': refresh}
    if color is not None:
        params['color'] = color
    cmd = "{} |".format(title)
    for p in params:
        cmd += " {}={}".format(p, params[p])
    print(cmd)


def showMenu(setting):
    player = getPlayer(setting)
    if player is None:
        print("Wrong UserID")
        print("---")
        cmd("Set singer UserID", "open", sys.argv[0])
        return
    else:
        print(setting.current if setting.current != '' else player.nick_name)
    print("---")
    if setting.currentid != '':
        print("Open in Brower | href=https://node.kg.qq.com/play?s={}".format(setting.currentid))
    print("Songs")
    print("---")
    for i, song in enumerate(player.playlist):
        if setting.showtime:
            song_name = "{}: {} {}".format(
                i + 1, Object.timeConverter(song.time), song.title.replace("|", "/"))
        else:
            song_name = "{}: {}".format(i + 1, song.title.replace("|", "/"))
        color = 'red' if setting.currentid == song.shareid else None
        cmd("--{}".format(song_name), "play", i, refresh=False, color=color)
    if isPlaying():
        cmd("Stop", "stop", refresh=True)
    elif setting.currentid != '':
        cmd("Resume", "resume", refresh=True)
    print("Loop - {}".format(setting.loop))
    print("---")
    cmd("--Ascend", "loop", "Ascend", refresh=True)
    cmd("--Descend", "loop", "Descend", refresh=True)
    cmd("--Random", "loop", "Random", refresh=True)
    cmd("--Single", "loop", "Single", refresh=True)
    print("Settings")
    print("---")
    print("--Singer UserID: {}".format(USERID))
    cmd("--Update Songs（{}）".format(Object.timeConverter(setting.lastupdate)),
        "update", refresh=True)
    cmd("--Edit Script", "open", sys.argv[0])
    cmd("--Open Cache Folder", "open_folder", Object.CACHE_PATH)
    text = "Hide" if setting.shownotify else "Show"
    cmd("--{} Notification".format(text), "notify", text, refresh=True)
    text = "Hide" if setting.showtime else "Show"
    cmd("--{} PublishTime".format(text), "time", text, refresh=True)
    cmd("--Clear Cache: {}".format(getDirSize(Object.CACHE_PATH)), 'clear', refresh=True)
    print("--Help | href=https://xfangfang.github.io/019")


def main():
    setting = loadSetting()
    if len(sys.argv) > 1:  # call this script from menu click
        if sys.argv[1] == 'play':  # play music
            play(setting, sys.argv[2])
        elif sys.argv[1] == 'stop':  # stop every thing
            killAll()
            text = "nothing" if setting.current == '' else setting.current
            notify(setting, "Stop", text)
            setting.current = ''
            setting.save()
        elif sys.argv[1] == 'resume':  # resume current song
            player = getPlayer(setting)
            index = findIndexByID(player.playlist, setting.currentid)
            play(setting, index)
        elif sys.argv[1] == 'loop':  # change loop method
            setting.loop = sys.argv[2]
            setting.save()
        elif sys.argv[1] == 'clear':  # clear cache
            killAll()
            os.system('rm -rf {}'.format(Object.CACHE_PATH))
        elif sys.argv[1] == 'notify':  # toggle notification when switch songs
            setting.shownotify = (sys.argv[2] == 'Show')
            setting.save()
        elif sys.argv[1] == 'time':  # toggle publishtime in song list
            setting.showtime = (sys.argv[2] == 'Show')
            setting.save()
        elif sys.argv[1] == 'open':  # open file
            os.system('open -a TextEdit.app {}'.format(sys.argv[2]))
        elif sys.argv[1] == 'open_folder':  # open folder
            os.system('open -a Finder.app {}'.format(sys.argv[2]))
        elif sys.argv[1] == 'update':  # update song list manually
            player = Player(setting.current_userid)
            player.getPlaylist()
            player.save()
            killAll()
            setting.current = ''
            setting.currentid = ''
            setting.lastupdate = int(round(time.time()))
            setting.save()
            notify(setting, "Update song list", "success!", True)
    else:
        showMenu(setting)  # xbar fresh plugin


if __name__ == "__main__":
    main()
