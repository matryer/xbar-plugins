#!/bin/bash

# <xbar.title>Clipboard BASE64-Encoder</xbar.title>
# <xbar.version>v0.1</xbar.version>
# <xbar.author>Steffen Froehlich</xbar.author>
# <xbar.author.github>citoki</xbar.author.github>
# <xbar.desc>This plugin will encode acutal clipboard item with BASE64.
# The result will be available in clipboard again. Do not use the result
# for cryptographic purposes!!
# It's inspired by the original clipboard-history plugin</xbar.desc>
# <xbar.image>PCFkb2N0eXBlIGh0bWw+IDxodG1sIGxhbmc9ImVuIj4gPGhlYWQ+IDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4gPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCxpbml0aWFsLXNjYWxlPTEiPiA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iRmluZCwgcmF0ZSBhbmQgc2hhcmUgdGhlIGJlc3QgbWVtZXMgYW5kIGltYWdlcy4gRGlzY292ZXIgdGhlIG1hZ2ljIG9mIHRoZSBJbnRlcm5ldCBhdCBJbWd1ci4iIGRhdGEtcmVhY3QtaGVsbWV0PSJ0cnVlIi8+IDxtZXRhIG5hbWU9ImNvcHlyaWdodCIgY29udGVudD0iQ29weXJpZ2h0IDIwMjIgSW1ndXIsIEluYy4iLz4gPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS9wbmciIGhyZWY9Imh0dHBzOi8vcy5pbWd1ci5jb20vaW1hZ2VzL2Zhdmljb24tMzJ4MzIucG5nIiBzaXplcz0iMzJ4MzIiPiA8bGluayByZWw9Imljb24iIHR5cGU9ImltYWdlL3BuZyIgaHJlZj0iaHR0cHM6Ly9zLmltZ3VyLmNvbS9pbWFnZXMvZmF2aWNvbi05Nng5Ni5wbmciIHNpemVzPSI5Nng5NiI+IDxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBocmVmPSJodHRwczovL3MuaW1ndXIuY29tL2ltYWdlcy9mYXZpY29uLTE2eDE2LnBuZyIgc2l6ZXM9IjE2eDE2Ij4gPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uLXByZWNvbXBvc2VkIiBocmVmPSJodHRwczovL3MuaW1ndXIuY29tL2ltYWdlcy9mYXZpY29uLTE1Mi5wbmciPiA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLVRpbGVDb2xvciIgY29udGVudD0iIzJjZDYzYyI+IDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUltYWdlIiBjb250ZW50PSJodHRwczovL3MuaW1ndXIuY29tL2ltYWdlcy9mYXZpY29uLTE0NC5wbmciPiA8bGluayByZWw9ImFsdGVybmF0ZSIgbWVkaWE9Im9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2NDBweCkiIGhyZWY9Imh0dHBzOi8vbS5pbWd1ci5jb20vIj4gPG1ldGEgbmFtZT0icDpkb21haW5fdmVyaWZ5IiBjb250ZW50PSI4MzQ1NTQ1MjE3NjU0MDhiOWVmZmRjNzU4YjY5YzVlZSIvPiA8bWV0YSBwcm9wZXJ0eT0ib2c6c2l0ZV9uYW1lIiBjb250ZW50PSJJbWd1ciIvPiA8bWV0YSBwcm9wZXJ0eT0iZmI6YWRtaW5zIiBjb250ZW50PSIxMjMzMTQ5MiIvPiA8bWV0YSBwcm9wZXJ0eT0iZmI6YWRtaW5zIiBjb250ZW50PSIxMjMwMTM2OSIvPiA8bWV0YSBwcm9wZXJ0eT0iZmI6YXBwX2lkIiBjb250ZW50PSIxMjc2MjE0MzczMDM4NTciLz4gPG1ldGEgcHJvcGVydHk9ImFsOmFuZHJvaWQ6dXJsIiBjb250ZW50PSJpbWd1cjovL2ltZ3VyLmNvbS8/ZnJvbT1mYnJlZmVycmFsIi8+IDxtZXRhIHByb3BlcnR5PSJhbDphbmRyb2lkOmFwcF9uYW1lIiBjb250ZW50PSJJbWd1ciIvPiA8bWV0YSBwcm9wZXJ0eT0iYWw6YW5kcm9pZDpwYWNrYWdlIiBjb250ZW50PSJjb20uaW1ndXIubW9iaWxlIi8+IDxtZXRhIHByb3BlcnR5PSJhbDppb3M6dXJsIiBjb250ZW50PSJpbWd1cjovL2ltZ3VyLmNvbS8/ZnJvbT1mYnJlZmVycmFsIi8+IDxtZXRhIHByb3BlcnR5PSJhbDppb3M6YXBwX3N0b3JlX2lkIiBjb250ZW50PSI2Mzk4ODE0OTUiLz4gPG1ldGEgcHJvcGVydHk9ImFsOmlvczphcHBfbmFtZSIgY29udGVudD0iSW1ndXIiLz4gPG1ldGEgcHJvcGVydHk9ImFsOndlYjp1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vaW1ndXIuY29tLyIvPiA8bWV0YSBuYW1lPSJ0d2l0dGVyOnNpdGUiIGNvbnRlbnQ9IkBpbWd1ciIvPiA8bWV0YSBuYW1lPSJ0d2l0dGVyOmRvbWFpbiIgY29udGVudD0iaW1ndXIuY29tIi8+IDxtZXRhIG5hbWU9InR3aXR0ZXI6YXBwOmlkOmdvb2dsZXBsYXkiIGNvbnRlbnQ9ImNvbS5pbWd1ci5tb2JpbGUiLz4gPG1ldGEgcHJvcGVydHk9ImF1dGhvciIgY29udGVudD0iSW1ndXIiLz4gPG1ldGEgcHJvcGVydHk9ImFydGljbGU6YXV0aG9yIiBjb250ZW50PSJJbWd1ciIvPiA8bWV0YSBwcm9wZXJ0eT0iYXJ0aWNsZTpwdWJsaXNoZXIiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9pbWd1ciI+IDx0aXRsZT5JbWd1cjogVGhlIG1hZ2ljIG9mIHRoZSBJbnRlcm5ldDwvdGl0bGU+PG1ldGEgcHJvcGVydHk9Im9nOnVybCIgZGF0YS1yZWFjdC1oZWxtZXQ9InRydWUiIGNvbnRlbnQ9Imh0dHBzOi8vaW1ndXIuY29tLzBZbTZ4TkMiPjxtZXRhIG5hbWU9InR3aXR0ZXI6aW1hZ2UiIGRhdGEtcmVhY3QtaGVsbWV0PSJ0cnVlIiBjb250ZW50PSJodHRwczovL2kuaW1ndXIuY29tLzBZbTZ4TkNoLmpwZyI+PGxpbmsgcmVsPSJhbHRlcm5hdGUiIHR5cGU9ImFwcGxpY2F0aW9uL2pzb24rb2VtYmVkIiBocmVmPSJodHRwczovL2FwaS5pbWd1ci5jb20vb2VtYmVkLmpzb24/dXJsPWh0dHBzOi8vaW1ndXIuY29tLzBZbTZ4TkMiIHRpdGxlPSJJbWd1cjogVGhlIG1hZ2ljIG9mIHRoZSBJbnRlcm5ldCI+PGxpbmsgcmVsPSJhbHRlcm5hdGUiIHR5cGU9ImFwcGxpY2F0aW9uL3htbCtvZW1iZWQiIGhyZWY9Imh0dHBzOi8vYXBpLmltZ3VyLmNvbS9vZW1iZWQueG1sP3VybD1odHRwczovL2ltZ3VyLmNvbS8wWW02eE5DIiB0aXRsZT0iSW1ndXI6IFRoZSBtYWdpYyBvZiB0aGUgSW50ZXJuZXQiPjxtZXRhIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL2ltZ3VyLmNvbS8wWW02eE5DIj48bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6d2lkdGgiIGRhdGEtcmVhY3QtaGVsbWV0PSJ0cnVlIiBjb250ZW50PSI2MDAiPjxtZXRhIHByb3BlcnR5PSJvZzppbWFnZTpoZWlnaHQiIGRhdGEtcmVhY3QtaGVsbWV0PSJ0cnVlIiBjb250ZW50PSIzMTUiPjxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgZGF0YS1yZWFjdC1oZWxtZXQ9InRydWUiIGNvbnRlbnQ9Imh0dHBzOi8vaS5pbWd1ci5jb20vMFltNnhOQy5wbmc/ZmIiPjxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiBkYXRhLXJlYWN0LWhlbG1ldD0idHJ1ZSIgY29udGVudD0iYXJ0aWNsZSI+PG1ldGEgbmFtZT0idHdpdHRlcjpjYXJkIiBkYXRhLXJlYWN0LWhlbG1ldD0idHJ1ZSIgY29udGVudD0ic3VtbWFyeV9sYXJnZV9pbWFnZSI+PG1ldGEgbmFtZT0idHdpdHRlcjp0aXRsZSIgZGF0YS1yZWFjdC1oZWxtZXQ9InRydWUiIGNvbnRlbnQ9ImltZ3VyLmNvbSI+PG1ldGEgbmFtZT0idHdpdHRlcjpkZXNjcmlwdGlvbiIgZGF0YS1yZWFjdC1oZWxtZXQ9InRydWUiIGNvbnRlbnQ9IkltZ3VyOiBUaGUgbWFnaWMgb2YgdGhlIEludGVybmV0Ij48bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGRhdGEtcmVhY3QtaGVsbWV0PSJ0cnVlIiBjb250ZW50PSJpbWd1ci5jb20iPjxtZXRhIHByb3BlcnR5PSJvZzpkZXNjcmlwdGlvbiIgZGF0YS1yZWFjdC1oZWxtZXQ9InRydWUiIGNvbnRlbnQ9IkltZ3VyOiBUaGUgbWFnaWMgb2YgdGhlIEludGVybmV0Ij4gPHNjcmlwdCBzcmM9Imh0dHBzOi8vanMubWVkaWEtbGFiLmFpL2FuYS1zZW50cnkuanMiIGRhdGEtYW5hLXNlbnRyeT0idHJ1ZSIgZGF0YS1kc249Imh0dHBzOi8vMzYwYjkyOWZkYWY4NGMxNTg1MjkyMDkwMWMwMGZhM2NAbzQzNTM1Ny5pbmdlc3Quc2VudHJ5LmlvLzU5OTE5MDciIGRhdGEtcmVsZWFzZT0iaW1ndXJAMi4wLjgiPjwvc2NyaXB0PiA8c2NyaXB0IGFzeW5jIHNyYz0iaHR0cHM6Ly9qcy5tZWRpYS1sYWIuYWkvd2FuYS4yLjIuMy5qcyI+PC9zY3JpcHQ+IDxzY3JpcHQ+IWZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbigpeyhuLnE9bi5xfHxbXSkucHVzaChhcmd1bWVudHMpfW4udj0xLHRbZV09dFtlXXx8bn0od2luZG93LFN0cmluZy5mcm9tQ2hhckNvZGUoOTcsMTAwLDEwOSwxMDUsMTE0LDk3LDEwOCkpLGZ1bmN0aW9uKHQsZSxuKXtuPXQuY3JlYXRlRWxlbWVudChlKSx0PXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSlbMF0sbi5hc3luYz0xLG4uc3JjPSJodHRwczovL3N0cmV0Y2hzcXVpcnJlbC5jb20vdjJ2dmxBZm1LM3FZODlnVVJPTEtZdkFYSllhM1BiaHNPbGZyYlJ0bncxdjVudkgtUnBlVllsamMiLHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobix0KX0oZG9jdW1lbnQsInNjcmlwdCIpLGZ1bmN0aW9uKGUsbix0LGMpe2Z1bmN0aW9uIHIodCl7KGZ1bmN0aW9uKCl7dHJ5e3JldHVybiAwPChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgidjRhYzFlaVpyMCIpfHwiIikuc3BsaXQoIiwiKVs0XX1jYXRjaCh0KXt9cmV0dXJuITF9KSgpJiYodD1lW25dLnB1YmFkcygpKSYmdC5zZXRUYXJnZXRpbmcoImFkbWlyYWwtZW5nYWdlZCIsInRydWUiKX0oYz1lW25dPWVbbl18fHt9KS5jbWQ9Yy5jbWR8fFtdLHR5cGVvZiBjLnB1YmFkcz09PXQ/cigpOnR5cGVvZiBjLmNtZC51bnNoaWZ0PT09dD9jLmNtZC51bnNoaWZ0KHIpOmMuY21kLnB1c2gocil9KHdpbmRvdywiZ29vZ2xldGFnIiwiZnVuY3Rpb24iKTwvc2NyaXB0PiA8c2NyaXB0PmRhdGFMYXllcj1bXTt2YXIgcGJqcz1wYmpzfHx7fTtwYmpzLnF1ZT1wYmpzLnF1ZXx8W108L3NjcmlwdD4gPHNjcmlwdD53aW5kb3cuZ2E9d2luZG93LmdhfHxmdW5jdGlvbigpeyhnYS5xPWdhLnF8fFtdKS5wdXNoKGFyZ3VtZW50cyl9LGdhLmw9K25ldyBEYXRlLGdhKCJjcmVhdGUiLCJVQS02NjcxOTA4LTIiLCJhdXRvIik8L3NjcmlwdD4gPHNjcmlwdCBhc3luYyBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcyI+PC9zY3JpcHQ+IDxzY3JpcHQgYXN5bmM9InRydWUiPiFmdW5jdGlvbigpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpLHQ9ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInNjcmlwdCIpWzBdLG49Imh0dHBzOi8vcXVhbnRjYXN0Lm1nci5jb25zZW5zdS5vcmciLmNvbmNhdCgiL2Nob2ljZS8iLCI2MVU1Q3k4bi1ENVUwIiwiLyIsImltZ3VyLmNvbSIsIi9jaG9pY2UuanMiKSxpPTA7ZS5hc3luYz0hMCxlLnR5cGU9InRleHQvamF2YXNjcmlwdCIsZS5zcmM9bixlLm9ubG9hZD1mdW5jdGlvbigpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUV2ZW50KCJFdmVudCIpO2UuaW5pdEV2ZW50KCJjbXBMb2FkZWQiLCEwLCEwKSx3aW5kb3cuZGlzcGF0Y2hFdmVudChlKX0sdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHQpLGZ1bmN0aW9uKCl7Zm9yKHZhciBlLGE9Il9fdGNmYXBpTG9jYXRvciIsaT1bXSxvPXdpbmRvdztvOyl7dHJ5e2lmKG8uZnJhbWVzW2FdKXtlPW87YnJlYWt9fWNhdGNoKGUpe31pZihvPT09d2luZG93LnRvcClicmVhaztvPW8ucGFyZW50fWV8fChmdW5jdGlvbiBlKCl7dmFyIHQ9by5kb2N1bWVudCxuPSEhby5mcmFtZXNbYV07aWYoIW4paWYodC5ib2R5KXt2YXIgaT10LmNyZWF0ZUVsZW1lbnQoImlmcmFtZSIpO2kuc3R5bGUuY3NzVGV4dD0iZGlzcGxheTpub25lIixpLm5hbWU9YSx0LmJvZHkuYXBwZW5kQ2hpbGQoaSl9ZWxzZSBzZXRUaW1lb3V0KGUsNSk7cmV0dXJuIW59KCksby5fX3RjZmFwaT1mdW5jdGlvbigpe3ZhciBlLHQ9YXJndW1lbnRzO2lmKCF0Lmxlbmd0aClyZXR1cm4gaTtpZigic2V0R2RwckFwcGxpZXMiPT09dFswXSkzPHQubGVuZ3RoJiYyPT09dFsyXSYmImJvb2xlYW4iPT10eXBlb2YgdFszXSYmKGU9dFszXSwiZnVuY3Rpb24iPT10eXBlb2YgdFsyXSYmdFsyXSgic2V0IiwhMCkpO2Vsc2UgaWYoInBpbmciPT09dFswXSl7dmFyIG49e2dkcHJBcHBsaWVzOmUsY21wTG9hZGVkOiExLGNtcFN0YXR1czoic3R1YiJ9OyJmdW5jdGlvbiI9PXR5cGVvZiB0WzJdJiZ0WzJdKG4pfWVsc2UgaS5wdXNoKHQpfSxvLmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLGZ1bmN0aW9uKGkpe3ZhciBhPSJzdHJpbmciPT10eXBlb2YgaS5kYXRhLGU9e307dHJ5e2U9YT9KU09OLnBhcnNlKGkuZGF0YSk6aS5kYXRhfWNhdGNoKGUpe312YXIgbz1lLl9fdGNmYXBpQ2FsbDtvJiZ3aW5kb3cuX190Y2ZhcGkoby5jb21tYW5kLG8udmVyc2lvbixmdW5jdGlvbihlLHQpe3ZhciBuPXtfX3RjZmFwaVJldHVybjp7cmV0dXJuVmFsdWU6ZSxzdWNjZXNzOnQsY2FsbElkOm8uY2FsbElkfX07YSYmKG49SlNPTi5zdHJpbmdpZnkobikpLGkuc291cmNlLnBvc3RNZXNzYWdlKG4sIioiKX0sby5wYXJhbWV0ZXIpfSwhMSkpfSgpO3ZhciBhPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzO3R5cGVvZiB3aW5kb3cuX191c3BhcGkhPT1hJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dm9pZCAwIT09d2luZG93Ll9fdXNwYXBpJiZ3aW5kb3cuX191c3BhcGkuYXBwbHkod2luZG93Ll9fdXNwYXBpLGUpfSw1MDApfTtpZih2b2lkIDA9PT13aW5kb3cuX191c3BhcGkpe3dpbmRvdy5fX3VzcGFwaT1hO3ZhciBvPXNldEludGVydmFsKGZ1bmN0aW9uKCl7aSsrLHdpbmRvdy5fX3VzcGFwaT09PWEmJmk8Mz9jb25zb2xlLndhcm4oIlVTUCBpcyBub3QgYWNjZXNzaWJsZSIpOmNsZWFySW50ZXJ2YWwobyl9LDZlMyl9fSgpLCJmdW5jdGlvbiI9PXR5cGVvZiB3aW5kb3cuX191c3BhcGkmJndpbmRvdy5fX3VzcGFwaSgidXNwUGluZyIsMSxmdW5jdGlvbihlLHQpe3QmJmUubW9kZS5pbmNsdWRlcygiVVNQIikmJmUuanVyaXNkaWN0aW9uLmluY2x1ZGVzKGUubG9jYXRpb24udG9VcHBlckNhc2UoKSkmJndpbmRvdy5fX3VzcGFwaSgic2V0VXNwRGZ0RGF0YSIsMSxmdW5jdGlvbihlLHQpe3R8fGNvbnNvbGUubG9nKCJFcnJvcjogVVNQIHN0cmluZyBub3QgdXBkYXRlZCEiKX0pfSk8L3NjcmlwdD4gPHNjcmlwdCBzcmM9Imh0dHBzOi8vYnRsb2FkZXIuY29tL3RhZz9vPTYyODI4Mzc5MDk1Njk1MzYmdXBhcGk9dHJ1ZSIgYXN5bmM+PC9zY3JpcHQ+IDxsaW5rIGhyZWY9Imh0dHBzOi8vcy5pbWd1ci5jb20vZGVza3RvcC1hc3NldHMvY3NzL3N0eWxlcy5kOGIzYTVlNjE0YmQ1OWFiM2RhZS5jc3MiIHJlbD0ic3R5bGVzaGVldCI+PC9oZWFkPiA8Ym9keT4gPG5vc2NyaXB0PklmIHlvdSdyZSBzZWVpbmcgdGhpcyBtZXNzYWdlLCB0aGF0IG1lYW5zIDxzdHJvbmc+SmF2YVNjcmlwdCBoYXMgYmVlbiBkaXNhYmxlZCBvbiB5b3VyIGJyb3dzZXI8L3N0cm9uZz4sIHBsZWFzZSA8c3Ryb25nPmVuYWJsZSBKUzwvc3Ryb25nPiB0byBtYWtlIEltZ3VyIHdvcmsuIDwvbm9zY3JpcHQ+IDxkaXYgaWQ9InJvb3QiPjwvZGl2PiA8c2NyaXB0IGNsYXNzPSJhYnAiIHNyYz0iaHR0cHM6Ly9zLmltZ3VyLmNvbS9taW4vcHguanM/Y2g9MSI+PC9zY3JpcHQ+IDxzY3JpcHQgY2xhc3M9ImFicCIgc3JjPSJodHRwczovL3MuaW1ndXIuY29tL21pbi9weC5qcz9jaD0yIj48L3NjcmlwdD4gPHNjcmlwdD4hZnVuY3Rpb24oZSx0LG4sbyxjLGEsZil7ZS5mYnF8fChjPWUuZmJxPWZ1bmN0aW9uKCl7Yy5jYWxsTWV0aG9kP2MuY2FsbE1ldGhvZC5hcHBseShjLGFyZ3VtZW50cyk6Yy5xdWV1ZS5wdXNoKGFyZ3VtZW50cyl9LGUuX2ZicXx8KGUuX2ZicT1jKSwoYy5wdXNoPWMpLmxvYWRlZD0hMCxjLnZlcnNpb249IjIuMCIsYy5xdWV1ZT1bXSwoYT10LmNyZWF0ZUVsZW1lbnQobikpLmFzeW5jPSEwLGEuc3JjPSIvL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL2ZiZXZlbnRzLmpzIiwoZj10LmdldEVsZW1lbnRzQnlUYWdOYW1lKG4pWzBdKS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGYpKX0od2luZG93LGRvY3VtZW50LCJzY3JpcHQiKSxmYnEoImluaXQiLCI3NDIzNzc4OTI1MzU1MzAiKSxmYnEoInRyYWNrIiwiUGFnZVZpZXciKSwiP3JlZyI9PT1kb2N1bWVudC5sb2NhdGlvbi5zZWFyY2gmJmZicSgidHJhY2siLCJDb21wbGV0ZVJlZ2lzdHJhdGlvbiIpPC9zY3JpcHQ+IDxub3NjcmlwdD48aW1nIGhlaWdodD0iMSIgd2lkdGg9IjEiIHN0eWxlPSJkaXNwbGF5Om5vbmUiIHNyYz0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3RyP2lkPTc0MjM3Nzg5MjUzNTUzMCZldj1QYWdlVmlldyZub3NjcmlwdD0xIi8+PC9ub3NjcmlwdD4gPHNjcmlwdD52YXIgX2NvbXNjb3JlPV9jb21zY29yZXx8W107X2NvbXNjb3JlLnB1c2goe2MxOiIyIixjMjoiMjI0ODk1ODMifSksZnVuY3Rpb24oKXt2YXIgYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKSxlPWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzY3JpcHQiKVswXTtjLmFzeW5jPSEwLGMuc3JjPSJodHRwczovL3NiLnNjb3JlY2FyZHJlc2VhcmNoLmNvbS9jcy8yMjQ4OTU4My9iZWFjb24uanMiLGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYyxlKX0oKTwvc2NyaXB0PiA8bm9zY3JpcHQ+PGltZyBzcmM9Imh0dHBzOi8vc2Iuc2NvcmVjYXJkcmVzZWFyY2guY29tL3A/YzE9MiZhbXA7YzI9MjI0ODk1ODMmYW1wO2N2PTMuNi4wJmFtcDtjaj0xIi8+PC9ub3NjcmlwdD4gPHNjcmlwdCBzcmM9Imh0dHBzOi8vcy5pbWd1ci5jb20vZGVza3RvcC1hc3NldHMvanMvbWFpbi41OGM1ZjM5YjM5ZTAzNTNiOWE1MC5qcyI+PC9zY3JpcHQ+PC9ib2R5PiA8L2h0bWw+IA==</xbar.image>
# <xbar.dependencies></xbar.dependencies>

# Hack for language not being set properly and unicode support
export LANG="${LANG:-en_US.UTF-8}"

PREFIX=""
APPENDIX=""

# user clicks on 'encoding'
if [[ "$1" = "encode" ]]; then
  echo -n "$(echo -n "${PREFIX}$(pbpaste)${APPENDIX}" | base64)" | pbcopy
  osascript -e "display notification \"Clipboard entry encoded with BASE64\" with title \"BitBar Clipboard BASE64-Encoder\"" &> /dev/null
  exit
fi

if [[ "$1" = "decode" ]]; then
  echo -n "$(echo -n "${PREFIX}$(pbpaste)${APPENDIX}" | base64 -D)" | pbcopy
  osascript -e "display notification \"Clipboard entry decoded with BASE64\" with title \"BitBar Clipboard BASE64-Encoder\"" &> /dev/null
  exit
fi


# Print icon
echo "🔏"
echo "---"
echo "Encode clipboard item with BASE64 | bash='$0' param1=encode terminal=false"
echo "Decode clipboard item with BASE64 | bash='$0' param1=decode terminal=false"

